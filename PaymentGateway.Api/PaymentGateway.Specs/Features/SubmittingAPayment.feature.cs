// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PaymentGateway.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("SubmittingAPayment")]
    public partial class SubmittingAPaymentFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SubmittingAPayment.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SubmittingAPayment", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can submit a payment and it is successful")]
        public virtual void ICanSubmitAPaymentAndItIsSuccessful()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can submit a payment and it is successful", null, ((string[])(null)));
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "PaymentId",
                            "PaymentStatus",
                            "ProcessedDate"});
                table8.AddRow(new string[] {
                            "1aa23b",
                            "Successful",
                            "10-Feb-2020 21:00"});
#line 4
 testRunner.Given("I receive the following response from the bank service", ((string)(null)), table8, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "CardNumber",
                            "ExpiryDate",
                            "Amount",
                            "Currency",
                            "CVV"});
                table9.AddRow(new string[] {
                            "12345678",
                            "01-Aug-2020",
                            "100.00",
                            "GBP",
                            "123"});
#line 7
 testRunner.When("I submit the following payment", ((string)(null)), table9, "When ");
#line hidden
#line 10
 testRunner.Then("the payment id \'1aa23b\' is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Status",
                            "ProcessedDate",
                            "CardNumber",
                            "ExpiryDate",
                            "Amount",
                            "Currency",
                            "CVV"});
                table10.AddRow(new string[] {
                            "1aa23b",
                            "Successful",
                            "10-Feb-2020 21:00",
                            "12345678",
                            "01-Aug-2020",
                            "100.00",
                            "GBP",
                            "123"});
#line 11
 testRunner.And("the following payments are stored", ((string)(null)), table10, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can submit a payment and it is unsuccessful")]
        public virtual void ICanSubmitAPaymentAndItIsUnsuccessful()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can submit a payment and it is unsuccessful", null, ((string[])(null)));
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "PaymentId",
                            "PaymentStatus",
                            "ProcessedDate"});
                table11.AddRow(new string[] {
                            "1aa23b",
                            "Unsuccessful",
                            "10-Feb-2020 21:00"});
#line 16
 testRunner.Given("I receive the following response from the bank service", ((string)(null)), table11, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "CardNumber",
                            "ExpiryDate",
                            "Amount",
                            "Currency",
                            "CVV"});
                table12.AddRow(new string[] {
                            "12345678",
                            "01-Aug-2020",
                            "100.00",
                            "GBP",
                            "123"});
#line 19
 testRunner.When("I submit the following payment", ((string)(null)), table12, "When ");
#line hidden
#line 22
 testRunner.Then("the payment id \'1aa23b\' is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Status",
                            "ProcessedDate",
                            "CardNumber",
                            "ExpiryDate",
                            "Amount",
                            "Currency",
                            "CVV"});
                table13.AddRow(new string[] {
                            "1aa23b",
                            "Unsuccessful",
                            "10-Feb-2020 21:00",
                            "12345678",
                            "01-Aug-2020",
                            "100.00",
                            "GBP",
                            "123"});
#line 23
 testRunner.And("the following payments are stored", ((string)(null)), table13, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can try to submit a payment with an invalid model")]
        [NUnit.Framework.TestCaseAttribute("", "31-Dec-2022", "1000", "GBP", "123", null)]
        [NUnit.Framework.TestCaseAttribute("12345678", "31-Dec-2019", "1000", "GBP", "123", null)]
        [NUnit.Framework.TestCaseAttribute("12345678", "31-Dec-2022", "0", "GBP", "123", null)]
        [NUnit.Framework.TestCaseAttribute("12345678", "31-Dec-2022", "-100", "GBP", "123", null)]
        [NUnit.Framework.TestCaseAttribute("12345678", "31-Dec-2022", "1000", "", "123", null)]
        [NUnit.Framework.TestCaseAttribute("12345678", "31-Dec-2022", "1000", "GBP", "", null)]
        public virtual void ICanTryToSubmitAPaymentWithAnInvalidModel(string cardNumber, string expiryDate, string amount, string currency, string cVV, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can try to submit a payment with an invalid model", null, exampleTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "CardNumber",
                            "ExpiryDate",
                            "Amount",
                            "Currency",
                            "CVV"});
                table14.AddRow(new string[] {
                            string.Format("{0}", cardNumber),
                            string.Format("{0}", expiryDate),
                            string.Format("{0}", amount),
                            string.Format("{0}", currency),
                            string.Format("{0}", cVV)});
#line 28
 testRunner.When("I submit the following payment", ((string)(null)), table14, "When ");
#line hidden
#line 31
 testRunner.Then("the UnprocessableEntity HTTP status code is returned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
 testRunner.And("there are no payments stored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
